CXXXDialog dlg;
CDialog(UINT nIDTemplate, CWnd* pParentWnd = NULL);
部分成员零值初始化，部分成员真值初始化（来源于参数）。



CDialog::DoModal()




如何封装 main 函数



如何重新生成MFC库

DLL Version of MFC 



DLLs (See dynamic link libraries)

DLLs [C++]




dynamic-link library (DLL)
shared 
simultaneously access
the information，at run time to locate the executable code for a DLL function
several advantages


two fundamental differences between applications and DLLs: 
An application can have multiple instances of itself running in the system simultaneously, whereas a DLL can have only one instance. 
An application can own things such as a stack, global memory, file handles, and a message queue, but a DLL cannot. 


a DLL file contains an exports table
the name of every function 
only the functions in the exports table can be accessed by other executables 
other are private to the DLL

viewed by using the DUMPBIN tool with the /EXPORTS option. 


export functions
two methods: 
module definition (.def) file 
keyword __declspec(dllexport) in the function's definition


make sure to use the __stdcall calling convention




module-definition (.def) file 
module statements
describe attributes of a DLL


minimal .def file
must contain 
module-definition statements: 
The first statement，must be the LIBRARY statement.
The EXPORTS statement lists the names and, optionally, the ordinal values of the functions exported 


functions in a C++ file
either place the decorated names or define with standard C linkage by using extern "C"
by using the DUMPBIN tool or by using the linker /MAP option
the decorated names produced by the compiler are compiler specific
using the same version of Visual C++
match


linker uses the .def file，create：
export (.exp) file  》》 to build the DLL file
import library (.lib) file 》》implicitly link 


MFC itself uses .def files to export functions and classes from the MFCx0.dll. 




export functions using the NONAME attribute
reduce the size of the DLL file



avoid the name decoration done by the compiler




 __declspec(dllexport)
convenient
not have to worry about maintaining a .def file and obtaining the decorated names of the exported functions. 
rebuild the application
because the decorated names might change 



two types of linking: 
 implicit linking
 explicit linking


Implicit linking occurs when an application's code calls an exported DLL function. 
the import library (.lib file) 
The import library only contains code to load the DLL and to implement calls to functions in the DLL.


system starts a program
dynamically linked references
locate the required DLLs

cannot 
terminates the process and displays error

maps the DLL modules into the process's address space. 




entry-point function




Explicit linking eliminates the need to link the application with an import library
not have to relink 




Implicit linking 
static load or load-time dynamic linking. 

Explicit linking 
dynamic load or run-time dynamic linking. 



use LIB with the /DEF option to create an import library and an export file.





optional entry-point function (usually called DllMain) 
is called for both initialization and termination.


four situations: 
process attach, 
process detach, 
thread attach, 
and thread detach. 



Regular DLL 
 In the DLL's CWinApp object's InitInstance and ExitInstance. 
 
Extension DLL 
 In the DllMain function generated by the MFC DLL Wizard. 
 
Non-MFC DLL 
 In a function called DllMain that you provide. 
 



non-MFC DLL 
does not use MFC internally
can be called by either MFC or non-MFC
usually using the standard C interface




Win32 DLL
C or C++ 
not use the Microsoft Foundation Class (MFC) library
Win32 Application Wizard. 


MFC DLL Wizard. 
DLL is using MFC
three different DLL development scenarios: 
Building a regular DLL that statically links MFC 
Building a regular DLL that dynamically links MFC 
Building an MFC extension DLL, which always dynamically link MFC 



the C run-time library that is used both by your program and the MFC DLLs 



MFC extension DLL 
reusable classes derived from existing Microsoft Foundation Class Library
using the dynamic-link library version of MFC
Only MFC executables can use an extension DLL. 




The MFC DLL
is really a special case of an MFC Extension DLL 
a very large number of exports for a large number of classes. 
a few additional things we do in the MFC DLL 
even more special than a regular Extension DLL. 


